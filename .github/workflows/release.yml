name: release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            out: deno_mmap_ffi-windows-x86_64.dll
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            out: deno_mmap_ffi-linux-x86_64.so
          - os: macos-14   # Apple Silicon runner
            target: aarch64-apple-darwin
            out: deno_mmap_ffi-macos-aarch64.dylib

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          toolchain: 'stable'

      - name: Cargo build (release)
        run: |
          cargo build --manifest-path ffi/Cargo.toml --release --target ${{ matrix.target }}

      - name: Copy artifact to dist/
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ART="target/${{ matrix.target }}/release/deno_mmap_ffi.dll"
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            ART="target/${{ matrix.target }}/release/deno_mmap_ffi.so"
          else
            ART="target/${{ matrix.target }}/release/deno_mmap_ffi.dylib"
          fi
          cp "$ART" "dist/${{ matrix.out }}"

      - name: Compute SHA256
        shell: bash
        run: |
          cd dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            pwsh -NoProfile -Command "(Get-FileHash -Algorithm SHA256 '${{ matrix.out }}').Hash.ToLower() | Out-File -Encoding ascii '${{ matrix.out }}.sha256'"
          else
            shasum -a 256 "${{ matrix.out }}" | awk '{print tolower($1)}' > "${{ matrix.out }}.sha256"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.out }}
          path: |
            dist/${{ matrix.out }}
            dist/${{ matrix.out }}.sha256

  release:
    name: github release (attach binaries)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/deno_mmap_ffi-*.dll
            artifacts/**/deno_mmap_ffi-*.so
            artifacts/**/deno_mmap_ffi-*.dylib
          prerelease: false

  jsr_publish_oidc:
    name: jsr publish (OIDC)
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Verify tag version matches deno.json
        run: |
          TAG="${GITHUB_REF_NAME#v}"
          PKG_VER=$(jq -r .version deno.json)
          echo "Tag: ${TAG}, deno.json: ${PKG_VER}"
          test "$TAG" = "$PKG_VER" || { echo "Version mismatch"; exit 1; }

      - name: Generate checksums.json from artifacts
        run: |
          deno run --allow-read --allow-write scripts/gen_checksums_json.ts artifacts checksums.json
          cat checksums.json

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Publish to JSR via OIDC (no token)
        run: |
          deno publish
